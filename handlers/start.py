import asyncio
import os.path
import re

import keyboards.all_kb as all_kbs
import keyboards.inline_kbs as inline_kbs
import create_bot as create_bot
import filters.is_admin as admin
import database.requests as req

from aiogram.utils.chat_action import ChatActionSender
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.utils import get_random_person, extract_number

start_router = Router()
questionnaire_router = Router()


class Form(StatesGroup):
    gender = State()
    age = State()
    full_name = State()
    user_login = State()
    photo = State()
    about = State()
    refer_id = State()
    check_state = State()


@start_router.message(Command('registration'))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=create_bot.bot, chat_id=message.chat.id):
        user_info = await req.get_user_data(user_id=message.from_user.id)

    if user_info:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∞ –∑–Ω–∞—á–∏—Ç —Ç–µ–±–µ –º–æ–∂–Ω–æ '
                             '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.',
                             reply_markup=all_kbs.main_kb(message.from_user.id))
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:', reply_markup=all_kbs.gender_kb())
        await state.set_state(Form.gender)


@start_router.message(Command('start_3'))
async def cmd_start_2(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_2 –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä Command()',
                         reply_markup=inline_kbs.ease_link_kb())


@start_router.message(F.text == '/start_4')
async def cmd_start_3(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_3 –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F.text!',
                         reply_markup=all_kbs.create_rat())


@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!')
async def get_inline_btn_link(message: Message):
    await message.answer('–í–æ—Ç —Ç–µ–±–µ!', reply_markup=inline_kbs.get_inline_kb())


@start_router.callback_query(F.data == 'get_person')
async def send_random_person(call: CallbackQuery):
    await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=False)
    user = get_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    await call.message.answer(formatted_message)


@start_router.message(Command('faq'))
async def cmd_faq(message: Message):
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏',
                         reply_markup=inline_kbs.create_qst_inline_kb(create_bot.questions))


@start_router.callback_query(F.data.startswith('qst_'))
async def cmd_start(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = create_bot.questions[qst_id]
    msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' \
               f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    async with ChatActionSender(bot=create_bot.bot, chat_id=call.from_user.id, action="typing"):
        await asyncio.sleep(2)
        await call.message.answer(msg_text, reply_markup=inline_kbs.create_qst_inline_kb(create_bot.questions))


@start_router.message(Command(commands=['settings', 'about']))
async def univers_cmd_handler(message: Message, command: CommandObject):
    command_args: str = command.args
    command_name = 'settings' if 'settings' in message.text else "about"
    response = f'–ë—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /{command_name}'
    if command_args:
        response += f' —Å –º–µ—Ç–∫–æ–π <b>{command_args}</b>'
    else:
        response += ' –±–µ–∑ –º–µ—Ç–∫–∏'
    await message.answer(response)


@start_router.message(F.text.lower().contains('—É–∫—Ä–∞–∏–Ω'), admin.IsAdmin(create_bot.admins))
async def process_find_word(message: Message):
    await message.answer('–í —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –£–∫—Ä–∞–∏–Ω—ã, –∞ —É –Ω–∞—Å —Ç–∞–∫–æ–µ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!')


@start_router.message(F.text.lower().contains('—É–∫—Ä–∞–∏–Ω'))
async def process_find_word(message: Message):
    await message.answer('–í —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –£–∫—Ä–∞–∏–Ω—ã, –∞ —É –Ω–∞—Å —Ç–∞–∫–æ–µ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!')


@start_router.message(F.text.regexp(r'(?i)^–ó–¥–∞—Ä–æ–≤–∞, .+'))
async def process_find_reg(message: Message):
    await message.answer('–ò —Ç–µ–±–µ –∑–¥–∞—Ä–æ–≤–∞! –ß–µ –Ω–∞–¥–∞?')


@start_router.message(F.text.lower().contains('–æ—Ö–æ—Ç–Ω–∏–∫'))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer('–Ø –¥—É–º–∞—é, —á—Ç–æ —Ç—ã —Ç—É—Ç –ø—Ä–æ —Ä–∞–¥—É–≥—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å')

    await create_bot.bot.send_message(chat_id=message.from_user.id, text='–î–ª—è –º–µ–Ω—è —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ')

    msg = await message.reply('–ù—É –≤–æ—Ç —á—Ç–æ –∑–∞ –≥–ª—É–ø–æ—Å—Ç–∏!?')

    await create_bot.bot.send_message(chat_id=message.from_user.id, text='–•–æ—Ç—è, —ç—Ç–æ –∑–∞–±–∞–≤–Ω–æ...',
                                      reply_to_message_id=msg.message_id)

    await create_bot.bot.forward_message(chat_id=message.from_user.id, from_chat_id=message.from_user.id,
                                         message_id=msg.message_id)

    data_task = {'user_id': message.from_user.id, 'full_name': message.from_user.full_name,
                 'username': message.from_user.username, 'message_id': message.message_id, 'date': message.date}
    print(data_task)


@start_router.message(Command('test_edit_msg'))
async def cmd_start(message: Message, state: FSMContext):
    msg = await message.answer('–ü—Ä–∏–≤–µ—Ç!')
    await asyncio.sleep(2)
    old_text = msg.text
    await msg.delete()
    await message.answer(old_text, reply_markup=all_kbs.main_kb(message.from_user.id))


@start_router.message(F.text.contains('üá∫üá∏'))
async def cmd_start(message: Message, state: FSMContext):
    audio_file = FSInputFile(path=os.path.join(create_bot.all_media_dir, 'why_usa_flag.mp3'),
                             filename='–£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å...')
    await message.answer_audio(audio=audio_file)


@questionnaire_router.message(Command('start_questionnaire'))
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=create_bot.bot, chat_id=message.chat.id):
        await asyncio.sleep(2)
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª: ', reply_markup=all_kbs.gender_kb())
    await state.set_state(Form.gender)


@questionnaire_router.message((F.text.lower().contains('–º—É–∂—á–∏–Ω–∞')) | (F.text.lower().contains('–∂–µ–Ω—â–∏–Ω–∞')), Form.gender)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(gender=message.text, user_id=message.from_user.id)
    async with ChatActionSender.typing(bot=create_bot.bot, chat_id=message.chat.id):
        await asyncio.sleep(2)
        await message.answer("–°—É–ø–µ—Ä! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç:", reply_markup=ReplyKeyboardRemove())
    await state.set_state((Form.age))


@questionnaire_router.message(F.text, Form.gender)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    async with ChatActionSender.typing(bot=create_bot.bot, chat_id=message.chat.id):
        await asyncio.sleep(2)
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Ç–µ—Ö —á—Ç–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: ', reply_markup=all_kbs.gender_kb())
    await state.set_state(Form.gender)


@questionnaire_router.message(F.text, Form.age)
async def start_questionnaire_process(message: Message, state: FSMContext):
    if not (re.fullmatch(r'\d+', message.text.strip())):
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤')
        return
    check_age = extract_number(message.text)
    if not check_age or not (1 <= int(message.text) <= 100):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100)')
        return

    await state.update_data(age=check_age)
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:')
    await state.set_state(Form.full_name)


@questionnaire_router.message(F.text, Form.full_name)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    text = '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ'

    if message.from_user.username:
        text += ' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –í–∞—à–∏–º –ª–æ–≥–∏–Ω–æ–º –±—É–¥–µ—Ç –ª–æ–≥–∏–Ω –¢–ì'
        await message.answer(text, reply_markup=inline_kbs.get_login_tg())
    else:
        text += ' : '
        await message.answer(text)

    await state.set_state(Form.user_login)


@questionnaire_router.callback_query(F.data, Form.user_login)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await call.answer('–ë–µ—Ä—É –ª–æ–≥–∏–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –ø—Ä–æ—Ñ–∏–ª—è')
    await call.message.edit_reply_markup(reply_markup=None)
    await state.update_data(user_login=call.from_user.username)
    await call.message.answer('–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ: ')
    await state.set_state(Form.photo)


@questionnaire_router.message(F.text, Form.user_login)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(user_login=message.from_user.username)
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ: ')
    await state.set_state(Form.photo)


@questionnaire_router.message(F.photo, Form.photo)
async def start_questionnaire_process(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ: ')
    await state.set_state(Form.about)


@questionnaire_router.message(F.document.mime_type.startswith('image/'), Form.photo)
async def start_questionnaire_process(message: Message, state: FSMContext):
    photo_id = message.document.file_id
    await state.update_data(photo=photo_id)
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ:')
    await state.set_state(Form.about)


@questionnaire_router.message(F.document, Form.photo)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!')
    await state.set_state(Form.photo)


@questionnaire_router.message(F.text, Form.about)
async def start_questionnaire_process(message: Message, state: FSMContext):
    await state.update_data(about=message.text)
    await message.answer(
        '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
        reply_markup=all_kbs.skip_kb('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:'))
    await state.set_state(Form.refer_id)


@questionnaire_router.message(F.text, Form.refer_id)
async def referer_check(message: Message, state: FSMContext):
    referral_code = message.text
    if not (re.fullmatch(r'\d+', referral_code.strip())):
        await message.reply('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')
        return
    if int(referral_code) == message.from_user.id:
        await message.reply('–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞, –Ω–æ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ}')
        return
    if not await req.check_code_exist(int(referral_code)):
        await message.reply('–í–∞—à –∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".')
        return
    await state.update_data(refer_id=int(referral_code))
    await proceed_to_check(message, state)


async def proceed_to_check(message: Message, state: FSMContext):
    data = await state.get_data()
    caption = (
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ: \n\n'
        f'<b>–ü–æ–ª–Ω–æ–µ –∏–º—è</b>: {data.get("full_name")}\n'
        f'<b>–ü–æ–ª</b>: {data.get("gender")}\n'
        f'<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {data.get("age")} –ª–µ—Ç\n'
        f'<b>–õ–æ–≥–∏–Ω –≤ –±–æ—Ç–µ</b>: {data.get("user_login")}\n'
        f'<b>–û —Å–µ–±–µ</b>: {data.get("about")}'
    )

    await message.answer_photo(photo=data.get('photo'), caption=caption, reply_markup=inline_kbs.check_data())
    await state.set_state(Form.check_state)


@questionnaire_router.callback_query(F.data == 'correct', Form.check_state)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await call.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    user_data = await state.get_data()
    await req.add_user(user_data)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
    await state.clear()


@questionnaire_router.callback_query(F.data == 'incorrect', Form.check_state)
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    await call.answer('–ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω–∞—á–∞–ª–∞')
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª: ', reply_markup=all_kbs.gender_kb())
    await state.set_state(Form.gender)


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=all_kbs.main)


@start_router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞', reply_markup=await inline_kbs.categories())


@start_router.callback_query(F.data.startswith('category_'))
async def category_selected(call: CallbackQuery):
    category_id = int(call.data.split('_')[1])
    await call.message.answer(f'–¢–æ–≤–∞—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=await inline_kbs.products(category_id))
    await call.answer("")


@start_router.callback_query(F.data.startswith('product_'))
async def product_selected(call: CallbackQuery):
    product_id = int(call.data.split('_')[1])
    product = await req.get_product(product_id=product_id)
    await call.message.answer(f'<b>{product.name}</b>\n\n{product.description}\n\n{product.price}$')
    await call.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {product.name}")


@start_router.message(F.text.contains('–ü—Ä–æ—Ñ–∏–ª—å'))
async def start_profile(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=create_bot.bot, chat_id=message.chat.id):
        user_info = await req.get_user_data(message.from_user.id)
        profile_message = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            f"<b>üíº –õ–æ–≥–∏–Ω:</b> @{user_info.user_login}\n"
            f"<b>üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {user_info.full_name}\n"
            f"<b>üßë‚Äçü¶∞ –ü–æ–ª:</b> {user_info.gender}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {user_info.age}\n"
            f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_info.date_reg}\n"
            f"<b>üìù –û —Å–µ–±–µ:</b> {user_info.about}\n"
        )
        await message.answer_photo(photo=user_info.photo, caption=profile_message)
